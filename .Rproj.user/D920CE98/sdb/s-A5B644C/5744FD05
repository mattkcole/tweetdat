{
    "collab_server" : "",
    "contents" : "# install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))\n# library(\"devtools\")\n# library(\"roxygen2\")\n# library(\"testthat\")\n# library(\"knitr\")\n\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Ctrl + Shift + B'\n#   Check Package:             'Ctrl + Shift + E'\n#   Test Package:              'Ctrl + Shift + T'\n\n\nnormalize <- function(w){\n        w$replyToSN <- as.character(w$replyToSN)\n        w$replyToSID <- as.character(w$replyToSID)\n        w$replyToUID <- as.character(w$replyToUID)\n        w\n}\n\nreduce_tweet <- function(x){\n        x <- select(x, -id, -replyToUID)\n        x\n}\n\nget_those_tweets_meow <- function(sample_size = 150, term = '@hillaryclinton'){\n\n        tweets <- searchTwitter(term, n=sample_size)\n        tweets_time <- Sys.time()\n\n        # lets generate a list (vector) of all of the observed users\n\n        user_names <- vector(length = sample_size)\n        for (i in 1:sample_size){\n                user_names[i] <- tweets[[i]]$screenName\n        }\n        user_names <- as.vector(user_names)\n\n        # lets get info from these users\n        sample_users <- lookupUsers(user_names)\n        sample_users_df <- twListToDF(sample_users)\n\n        # lets make a data frame of the tweets we got\n        tweets_df <- twListToDF(tweets)\n        #head(tweets_df)\n        #colnames(tweets_df)\n\n        # making a list of all users and one tweet (not particularly usefull)\n        tester <- full_join(sample_users_df, tweets_df, by='screenName')\n        tester <- select(tester, -id.y, -id.x)\n\n        print(\"Collecting Tweets...\")\n\n        list_dim <- data.frame()\n        tweet_count <- 10\n        for (i in 1:length(user_names)){\n                w <- userTimeline(user_names[i],n=tweet_count, includeRts=TRUE)\n                if (identical(w, list()) == FALSE){\n                        tempor <- twListToDF(w) # this is a new line...\n                        tempor <- normalize(tempor)\n                        list_dim <- bind_rows(tempor, list_dim)\n                        Sys.sleep(0)\n                }\n        }\n\n        tweet_observations <- list_dim\n        # lets say that our data is in list_dim\n        # we will now attempt to add tweet info to our data rows\n\n        print(\"Making those tweets pretty\")\n\n        for (i in 1:tweet_count){\n                if (i == 1){\n                        to_add <- match(unique(tweet_observations$screenName), tweet_observations$screenName)\n                        #tweet_observations <- reduce_tweet(tweet_observations)\n\n                        add_me <- tweet_observations[to_add,]\n                        colnames(add_me) <- ifelse(colnames(tweet_observations) == \"screenName\", # TEST\n                                                   colnames(tweet_observations), paste(colnames(tweet_observations),i,sep=\"\"))# TEST\n\n                        db <- full_join(sample_users_df, add_me, by='screenName') #changing tweet_observations[to_add,] to add_me\n                } else {\n                        # removing those observations already added\n                        tweet_observations <- tweet_observations[-to_add,]\n\n                        # finding new unique observations to add\n                        to_add <- match(unique(tweet_observations$screenName), tweet_observations$screenName)\n                        # storing these\n                        add_me <- tweet_observations[to_add,]\n                        # renaming\n                        colnames(add_me) <- ifelse(colnames(tweet_observations) == \"screenName\",\n                                                   colnames(tweet_observations), paste(colnames(tweet_observations),i,sep=\"\"))\n                        db <- full_join(db, add_me, by='screenName')\n                }\n        }\n        print(paste(\"Data was generated from twitter on\", tweets_time))\n        return(db)\n}\n\n# Existing trolls to DF\n\ntrolls <- function(usernames){\n\n        # lets get info from these users\n        sample_users <- lookupUsers(usernames)\n        sample_users_df <- twListToDF(sample_users)\n\n\n        # defining this function to allow for easier data frame construction\n        normalize <- function(w){\n                w$replyToSN <- as.character(w$replyToSN)\n                w$replyToSID <- as.character(w$replyToSID)\n                w$replyToUID <- as.character(w$replyToUID)\n                w\n        }\n\n        reduce_tweet <- function(x){\n                x <- select(x, -id, -replyToUID)\n                x\n        }\n\n        list_dim <- data.frame()\n        tweet_count <- 10\n        for (i in 1:length(user_names)){\n                w <- userTimeline(user_names[i],n=tweet_count, includeRts=TRUE)\n                if (identical(w, list()) == FALSE){\n                        tempor <- twListToDF(w) # this is a new line...\n                        tempor <- normalize(tempor)\n                        list_dim <- bind_rows(tempor, list_dim)\n                        Sys.sleep(0)\n                }\n        }\n\n        tweet_observations <- list_dim\n        # lets say that our data is in list_dim\n        # we will now attempt to add tweet info to our data rows\n\n        tweetno <- tweet_count\n        print(paste(\"We will collect the most recent\", tweetno, \"tweets\"))\n\n        for (i in 1:tweetno){\n                if (i == 1){\n                        to_add <- match(unique(tweet_observations$screenName), tweet_observations$screenName)\n                        #tweet_observations <- reduce_tweet(tweet_observations)\n\n                        add_me <- tweet_observations[to_add,]\n                        colnames(add_me) <- ifelse(colnames(tweet_observations) == \"screenName\", # TEST\n                                                   colnames(tweet_observations), paste(colnames(tweet_observations),i,sep=\"\"))# TEST\n\n                        #                 colnames(add_me) <- ifelse(colnames(add_me) == \"screenName\",# PRESERVED\n                        #                         colnames(add_me), paste(colnames(add_me),i,sep=\"\")) # PRESERVED\n                        db <- full_join(sample_users_df, add_me, by='screenName') #changing tweet_observations[to_add,] to add_me\n                } else {\n                        # removing those observations already added\n                        tweet_observations <- tweet_observations[-to_add,]\n\n                        # finding new unique observations to add\n                        to_add <- match(unique(tweet_observations$screenName), tweet_observations$screenName)\n                        # storing these\n                        add_me <- tweet_observations[to_add,]\n                        # renaming\n                        colnames(add_me) <- ifelse(colnames(tweet_observations) == \"screenName\",\n                                                   colnames(tweet_observations), paste(colnames(tweet_observations),i,sep=\"\"))\n                        db <- full_join(db, add_me, by='screenName')\n                }\n        }\n\n        paste(\"Data was generated from twitter on\", tweets_time)\n        return(db)\n\n}\n",
    "created" : 1479351779543.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3816585406",
    "id" : "5744FD05",
    "lastKnownWriteTime" : 1479354856,
    "last_content_update" : 1479354856505,
    "path" : "~/Dropbox/projects/tweetdat/R/hello.R",
    "project_path" : "R/hello.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}